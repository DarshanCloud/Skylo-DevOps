Homework Case study- 2
 Focus area
 CI/CD, tools and frameworks

 Understanding
 Consider yourself a DevOps engineer working on a project to develop a Cloud based system that
 consists of a frontend server and many different backend components. Backend services to be hosted in
 Cloud Platform. Let’s consider the following cloud infrastructure requirement:
 	● Backendservice-1: Due to certain technical constraints this service need to be hosted in VM
 	● Backend service-2: this service implements customer facing REST apis and to be hosted in the kubernetes cluster.
 	● 3morebackendservices are internal microservices to be hosted in the Kubernetes cluster.
 	● Allservices are developed in Java
 	● SQLdatabase is used and is accessed by all services
 	● Scalable deployment

 Ask from Candidates?
 	● Assume that Cloud infrastructure is created and available for hosting all services
 	● You have been asked to create a CI/CD pipeline for the project. Articulate what level of additional
      details are required for your work?
 	● List out various tools and frameworks that can be used for each part of the CI/CD. Justify the selection.
 	● Define various pipeline stages and how would you implement it?
 	● How the CI/CD can be managed for multiple environment (develop, QA and Production)
 	● Prepare a sample Jenkin file with all step and comments
 	● Discuss challenges?


1. Before designing the CI/CD pipeline, we need additional details:

    i.  Source Code Repository: Which version control system (e.g., GitHub, GitLab, Bitbucket) is used?

    ii. Build Process: What build tool is used for Java applications? (e.g., Maven, Gradle).

    iii.Test Suite: Types of tests are required? (unit tests, integration tests, end-to-end tests), specific testing frameworks or tools? (e.g., JUnit).

    iv. Deployment Strategy: Deployment be handled for each service? (e.g., rolling updates, blue-green deployments).

    v.  Infrastructure Details: Cloud provider is used? (e.g., AWS, GCP, Azure) - here lets use GCP.

    vi. Monitoring and Logging: Implement monitoring using tools like gcp monitoring, logging and DataDog to ensure health and performance.

    vii.Rollback Strategy: Rollback strategy in case of a failed deployment?


2. Tools and Frameworks that can be used for each part of the CI/CD.

    i. Git: GitHub for version control.

    ii. Build and Test: Maven or Gradle for build and JUnit for unit testing, Mockito for mocking, and Cucumber for end-to-end testing.

    iii. Continuous Integration/Continuous Deployment (CI/CD) Tools:
         CI/CD Platform: Jenkins.
         Docker: For containerizing applications.
         Kubernetes: For deploying frontend and backend services.
         Terraform: For infrastructure as code (IaC) and provisioning.
         Configuration Management: ConfigMaps and Secrets in Kubernetes for application configuration.

3. Various pipeline stages

    i. Source Code Checkout: Checkout the latest code from the repository.

    ii.Build: Compile the code using Maven or Gradle and Package the application (e.g., JAR files).

    iii. Test: Execute unit tests, integration tests, and other tests.

    iv. Build Docker Images: Build Docker images for each service and Tag images with version numbers.

    v. Push Docker Images: Push Docker images to a container registry to gcp container registry.

    vi. Deploy to Develop: Deploy the services to a Develop environment in Kubernetes and VM.

    vii. Deploy to QA: Deploy the services to a QA environment in Kubernetes and VM.

    viii.Approval/Manual Testing: Manual testing or QA approval process.

    ix. Deploy to Production: Deploy to the production environment in Kubernetes and VM.

    x. Monitoring: Ensure monitoring and logging are set up for the deployed services.

    xi. Cleanup/Artifacts Management: Clean up old Docker images and artifacts if necessary.



